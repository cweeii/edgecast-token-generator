{"version":3,"sources":["../app/ec-encrypt.spec.js"],"names":[],"mappings":";;AAAA;;;;AACA;;AACA;;;;AAEA;;;;;;AAEA,SAAS,WAAT,EAAsB,YAAM;AAC1B,MAAI,gBAAJ,CAD0B;;AAG1B,MAAM,MAAM,KAAN,CAHoB;AAI1B,MAAM,SAAS,aAAT,CAJoB;AAK1B,MAAM,OAAO,CAAC,MAAD,EAAS,UAAT,EAAqB,GAArB,EAA0B,MAA1B,CAAP,CALoB;;AAO1B,aAAW,YAAM;AACf,cAAU,gBAAM,OAAN,CAAc,MAAd,EAAV,CADe;GAAN,CAAX,CAP0B;;AAW1B,YAAU,YAAM;AACd,YAAQ,OAAR,GADc;GAAN,CAAV,CAX0B;;AAe1B,UAAQ,OAAR,EAAiB,YAAM;AACrB,OAAG,wDAAH,EAA6D,YAAK;AAChE,cAAQ,IAAR,sBAAwB,eAAxB,EADgE;;AAGhE,UAAI,YAAY,KAAK,CAAL,EAAQ,MAAR,CAHgD;AAIhE,UAAI,eAAe,KAAK,CAAL,EAAQ,MAAR,CAJ6C;;AAMhE,UAAI,cAAc,CAAC,eAAgB,KAAK,CAAL,CAAjB,GAA4B,CAA5B,CAN8C;;AAQhE,UAAI,OAAO,CAAC,MAAD,EAAS,GAAT,CAAP,CAR4D;;AAUhE,0BAAU,IAAV,CAAe,IAAf,EAVgE;AAWhE,mBAAO,SAAP,CAAiB,oBAAU,aAAV,CAAwB,IAAxB,CAA6B,CAA7B,CAAjB,EAAkD,IAAlD,EAAwD,qGAAxD,EAXgE;KAAL,CAA7D,CADqB;GAAN,CAAjB,CAf0B;;AA+B1B,UAAQ,gBAAR,EAA0B,YAAM;AAC9B,OAAG,qEAAH,EAA0E,YAAM;AAC9E,cAAQ,IAAR,sBAAwB,cAAxB,EAD8E;AAE9E,cAAQ,IAAR,sBAAwB,YAAxB,EAF8E;AAG9E,cAAQ,IAAR,sBAAwB,WAAxB,EAAqC,OAArC,CAA6C,EAA7C,EAH8E;AAI9E,cAAQ,IAAR,sBAAwB,gBAAxB,EAJ8E;;AAM9E,0BAAU,aAAV,CAAwB,aAAxB,EAAuC,UAAvC,EAN8E;;AAQ9E,wBAAO,oBAAU,YAAV,CAAuB,UAAvB,EAAmC,2CAA1C,EAR8E;AAS9E,mBAAO,KAAP,CAAa,oBAAU,YAAV,CAAuB,IAAvB,CAA4B,CAA5B,EAA+B,CAA/B,CAAb,EAAgD,UAAhD,EAA4D,wDAA5D,EAT8E;;AAW9E,wBAAO,oBAAU,UAAV,CAAqB,UAArB,EAAiC,yCAAxC,EAX8E;AAY9E,wBAAO,oBAAU,SAAV,CAAoB,UAApB,EAAgC,wCAAvC,EAZ8E;AAa9E,wBAAO,oBAAU,cAAV,CAAyB,UAAzB,EAAqC,6CAA5C,EAb8E;KAAN,CAA1E,CAD8B;GAAN,CAA1B,CA/B0B;;AAiD1B,UAAQ,aAAR,EAAuB,YAAM,EAAN,CAAvB,CAjD0B;CAAN,CAAtB","file":"ec-encrypt.spec.js","sourcesContent":["import sinon from 'sinon';\nimport { assert } from 'chai';\nimport crypto from 'crypto';\n\nimport ecEncrypt from './ec-encrypt';\n\ndescribe('ecEncrypt', () => {\n  let sandbox;\n\n  const key = 'key';\n  const string = 'some-string';\n  const argv = ['node', 'filepath', key, string];\n\n  beforeEach(() => {\n    sandbox = sinon.sandbox.create();\n  });\n\n  afterEach(() => {\n    sandbox.restore();\n  });\n\n  context('#main', () => {\n    it('should pass the correct parameters into #generateToken', () =>{\n      sandbox.stub(ecEncrypt, 'generateToken');\n\n      let keyLength = argv[2].length;\n      let stringLength = argv[3].length;\n\n      let tokenLength = (stringLength + (16 * 2)) * 4;\n\n      let args = [string, key];\n\n      ecEncrypt.main(argv);\n      assert.deepEqual(ecEncrypt.generateToken.args[0], args, 'generateToken should have been called with token length, string, string length, key, and key length');\n    });\n  });\n\n  context('#generateToken', () => {\n    it('should call generateHash, generateIv, ecEncrypt, and constructToken', () => {\n      sandbox.stub(ecEncrypt, 'generateHash');\n      sandbox.stub(ecEncrypt, 'generateIv');\n      sandbox.stub(ecEncrypt, 'ecEncrypt').returns({});\n      sandbox.stub(ecEncrypt, 'constructToken');\n\n      ecEncrypt.generateToken('some-string', 'some-key');\n\n      assert(ecEncrypt.generateHash.calledOnce, 'generateHmac should have been called once');\n      assert.equal(ecEncrypt.generateHash.args[0][0], 'some-key', 'generateHash should have been called with \\'some-key\\'');\n\n      assert(ecEncrypt.generateIv.calledOnce, 'generateIv should have been called once');\n      assert(ecEncrypt.ecEncrypt.calledOnce, 'ecEncrypt should have been called once');\n      assert(ecEncrypt.constructToken.calledOnce, 'constructToken should have been called once');\n    });\n  });\n\n  context('#generateIv', () => {\n\n  });\n});\n"]}
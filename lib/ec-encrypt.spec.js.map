{"version":3,"sources":["../app/ec-encrypt.spec.js"],"names":[],"mappings":";;AAAA;;;;AACA;;AAEA;;;;;;AAEA,SAAS,WAAT,EAAsB,YAAM;AAC1B,MAAI,gBAAJ,CAD0B;;AAG1B,MAAM,MAAM,KAAN,CAHoB;AAI1B,MAAM,SAAS,aAAT,CAJoB;AAK1B,MAAM,OAAO,CAAC,MAAD,EAAS,UAAT,EAAqB,GAArB,EAA0B,MAA1B,CAAP,CALoB;;AAO1B,aAAW,YAAM;AACf,cAAU,gBAAM,OAAN,CAAc,MAAd,EAAV,CADe;GAAN,CAAX,CAP0B;;AAW1B,YAAU,YAAM;AACd,YAAQ,OAAR,GADc;GAAN,CAAV,CAX0B;;AAe1B,UAAQ,OAAR,EAAiB,YAAM;AACrB,OAAG,wDAAH,EAA6D,YAAK;AAChE,cAAQ,IAAR,sBAAwB,eAAxB,EADgE;;AAGhE,UAAI,YAAY,KAAK,CAAL,EAAQ,MAAR,CAHgD;AAIhE,UAAI,eAAe,KAAK,CAAL,EAAQ,MAAR,CAJ6C;;AAMhE,UAAI,cAAc,CAAC,eAAgB,KAAK,CAAL,CAAjB,GAA4B,CAA5B,CAN8C;;AAQhE,UAAI,OAAO,CAAC,WAAD,EAAc,MAAd,EAAsB,YAAtB,EAAoC,GAApC,EAAyC,SAAzC,CAAP,CAR4D;;AAUhE,0BAAU,IAAV,CAAe,IAAf,EAVgE;AAWhE,mBAAO,SAAP,CAAiB,oBAAU,aAAV,CAAwB,IAAxB,CAA6B,CAA7B,CAAjB,EAAkD,IAAlD,EAAwD,qGAAxD,EAXgE;KAAL,CAA7D,CADqB;GAAN,CAAjB,CAf0B;;AA+B1B,UAAQ,gBAAR,EAA0B,YAAM;AAC9B,OAAG,qBAAH,EAA0B,YAAM,EAAN,CAA1B,CAD8B;GAAN,CAA1B,CA/B0B;CAAN,CAAtB","file":"ec-encrypt.spec.js","sourcesContent":["import sinon from 'sinon';\nimport { assert } from 'chai';\n\nimport ecEncrypt from './ec-encrypt';\n\ndescribe('ecEncrypt', () => {\n  let sandbox;\n\n  const key = 'key';\n  const string = 'some-string';\n  const argv = ['node', 'filepath', key, string];\n\n  beforeEach(() => {\n    sandbox = sinon.sandbox.create();\n  });\n\n  afterEach(() => {\n    sandbox.restore();\n  });\n\n  context('#main', () => {\n    it('should pass the correct parameters into #generateToken', () =>{\n      sandbox.stub(ecEncrypt, 'generateToken');\n\n      let keyLength = argv[2].length;\n      let stringLength = argv[3].length;\n\n      let tokenLength = (stringLength + (16 * 2)) * 4;\n\n      let args = [tokenLength, string, stringLength, key, keyLength];\n\n      ecEncrypt.main(argv);\n      assert.deepEqual(ecEncrypt.generateToken.args[0], args, 'generateToken should have been called with token length, string, string length, key, and key length');\n    });\n  });\n\n  context('#generateToken', () => {\n    it('should do something', () => {\n    });\n  });\n});\n"]}
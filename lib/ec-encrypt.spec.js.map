{"version":3,"sources":["../app/ec-encrypt.spec.js"],"names":[],"mappings":"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","file":"ec-encrypt.spec.js","sourcesContent":["import sinon from 'sinon';\nimport { assert } from 'chai';\nimport crypto from 'crypto';\n\nimport ecEncrypt from './ec-encrypt';\n\ndescribe('ecEncrypt', () => {\n  let sandbox;\n\n  const key = 'key';\n  const string = 'some-string';\n  const argv = ['node', 'filepath', key, string];\n\n  beforeEach(() => {\n    sandbox = sinon.sandbox.create();\n  });\n\n  afterEach(() => {\n    sandbox.restore();\n  });\n\n  context('#main', () => {\n    it('should pass the correct parameters into #generateToken', () =>{\n      sandbox.stub(ecEncrypt, 'generateToken');\n      sandbox.stub(console, 'log');\n\n      let keyLength = argv[2].length;\n      let stringLength = argv[3].length;\n\n      let tokenLength = (stringLength + (16 * 2)) * 4;\n\n      let args = [string, key];\n\n      ecEncrypt.main(argv);\n      assert.deepEqual(ecEncrypt.generateToken.args[0], args, 'generateToken should have been called with token length, string, string length, key, and key length');\n    });\n  });\n\n  context('#generateToken', () => {\n    it('should call generateHash, generateIv, ecEncrypt, and constructToken', () => {\n      sandbox.stub(ecEncrypt, 'generateHash');\n      sandbox.stub(ecEncrypt, 'generateIv');\n      sandbox.stub(ecEncrypt, 'ecEncrypt').returns({});\n      sandbox.stub(ecEncrypt, 'constructToken');\n\n      ecEncrypt.generateToken('some-string', 'some-key');\n\n      assert(ecEncrypt.generateHash.calledOnce, 'generateHmac should have been called once');\n      assert.equal(ecEncrypt.generateHash.args[0][0], 'some-key', 'generateHash should have been called with \\'some-key\\'');\n\n      assert(ecEncrypt.generateIv.calledOnce, 'generateIv should have been called once');\n      assert(ecEncrypt.ecEncrypt.calledOnce, 'ecEncrypt should have been called once');\n      assert(ecEncrypt.constructToken.calledOnce, 'constructToken should have been called once');\n    });\n  });\n\n  context('#generateIv', () => {\n    it('should call crypto.randomBytes to generate a random 12 byte number', () => {\n      sandbox.stub(crypto, 'randomBytes')\n\n      ecEncrypt.generateIv();\n\n      assert.equal(crypto.randomBytes.args[0][0], 12, 'crypto.randomBytes should have been called with 12');\n    })\n  });\n\n  context('#ecEncrypt', () => {\n    it('should call crypto.createCipheriv and transform cipher', () => {\n      sandbox.stub(crypto, 'createCipheriv').returns(cipher);\n      let algorithm = 'some-algorithm';\n      let key = 'some-key';\n      let iv = 'some-iv';\n      let string = 'some-expiration-time';\n      let cipher = {\n        update: sandbox.spy(),\n        final: sandbox.spy()\n      }\n\n      ecEncrypt.ecEncrypt(algorithm, key, iv);\n\n      assert.deepEqual(crypto.createCipheriv.args[0], [key, iv, string], 'crypto.createCipheriv should have been called with key, iv, and string');\n    });\n  });\n\n  context('#constructToken', () => {\n\n  });\n});\n"]}
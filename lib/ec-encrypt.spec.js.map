{"version":3,"sources":["../app/ec-encrypt.spec.js"],"names":[],"mappings":"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","file":"ec-encrypt.spec.js","sourcesContent":["import sinon from 'sinon';\nimport { assert } from 'chai';\nimport crypto from 'crypto';\n\nimport ecEncrypt from './ec-encrypt';\n\ndescribe('ec-encrypt', () => {\n  let sandbox;\n\n  const IV_LEN = 12;\n  const algorithm = 'aes-256-gcm';\n  const key = 'secret-key';\n  const iv = 'some-iv';\n  const string = 'some-expiration-time';\n  const argv = ['node', 'filepath', key, string];\n\n  const bufIv = new Buffer(iv);\n  const bufEncrypted = new Buffer('encrypted');\n  const bufFinal = new Buffer('final');\n  const bufTag = new Buffer('tag');\n  const bufCiphertext = new Buffer('some-ciphertext');\n\n  beforeEach(() => {\n    sandbox = sinon.sandbox.create();\n  });\n\n  afterEach(() => {\n    sandbox.restore();\n  });\n\n  context('#constructToken', () => {\n    function generateToken() {\n      let totalLength = bufIv.length + bufTag.length + bufCiphertext.length;\n      let buf = Buffer.concat([bufIv, bufCiphertext, bufTag], totalLength);\n\n      let token = buf.toString('base64');\n      token = token.replace(/\\+/g, '\\-');\n      token = token.replace(/\\//g, '\\_');\n\n      return token;\n    }\n\n    it('should generate a url safe base64 encoded string', () => {\n      let exptoken = generateToken();\n\n      let token = ecEncrypt.constructToken(bufIv, bufTag, bufCiphertext);\n\n      assert.equal(token.indexOf('\\+'), -1, 'the character \\'\\+\\' should have been replaced with \\'\\-\\' in the token');\n      assert.equal(token.indexOf('\\/'), -1, 'the character \\'\\/\\' should have been replaced with \\'\\_\\' in the token');\n      assert.equal(exptoken, token, 'returned token should have been equal to the expected token');\n    });\n  });\n\n  context('#ecEncrypt', () => {\n    it('should call crypto.createCipheriv and transform cipher', () => {\n      let totalLength = bufEncrypted.length + bufFinal.length;\n      let cipher = {\n        update: sandbox.spy(() => {\n          return bufEncrypted;\n        }),\n        final: sandbox.spy(() => {\n          return bufFinal;\n        }),\n        getAuthTag: sandbox.spy(() => {\n          return bufTag;\n        })\n      };\n      let expReturnedCipher = {\n        bufCiphertext: Buffer.concat([bufEncrypted, bufFinal], totalLength),\n        bufTag: bufTag\n      };\n      sandbox.stub(crypto, 'createCipheriv').returns(cipher);\n\n      let returnedCipher = ecEncrypt.ecEncrypt(key, iv, string);\n\n      assert.deepEqual(crypto.createCipheriv.args[0], [algorithm, key, iv], 'crypto.createCipheriv should have been called with key, iv, and string');\n      assert.equal(cipher.update.args[0][0], string, 'cipher.update should have been called with \\'some-expieration-time\\'');\n      assert(cipher.final.calledOnce, 'cipher.final should have been called once');\n      assert.deepEqual(expReturnedCipher, returnedCipher, 'returnedCipher should be equal to the expReturnedCipher');\n    });\n  });\n\n  context('#generateIv', () => {\n    it('should call crypto.randomBytes to generate a random 12 byte number', () => {\n      sandbox.stub(crypto, 'randomBytes')\n\n      ecEncrypt.generateIv();\n\n      assert.equal(crypto.randomBytes.args[0][0], IV_LEN, 'crypto.randomBytes should have been called with 12');\n    })\n  });\n\n  context('#generateToken', () => {\n    it('should call generateHash, generateIv, ecEncrypt, and constructToken', () => {\n      sandbox.stub(ecEncrypt, 'generateHash');\n      sandbox.stub(ecEncrypt, 'generateIv');\n      sandbox.stub(ecEncrypt, 'ecEncrypt').returns({});\n      sandbox.stub(ecEncrypt, 'constructToken');\n\n      ecEncrypt.generateToken('some-string', 'some-key');\n\n      assert(ecEncrypt.generateHash.calledOnce, 'generateHmac should have been called once');\n      assert.equal(ecEncrypt.generateHash.args[0][0], 'some-key', 'generateHash should have been called with \\'some-key\\'');\n      assert(ecEncrypt.generateIv.calledOnce, 'generateIv should have been called once');\n      assert(ecEncrypt.ecEncrypt.calledOnce, 'ecEncrypt should have been called once');\n      assert(ecEncrypt.constructToken.calledOnce, 'constructToken should have been called once');\n    });\n  });\n\n  context('#main', () => {\n    it('should pass the correct parameters into #generateToken', () => {\n      sandbox.stub(ecEncrypt, 'generateToken').returns('stub returned');\n      let keyLength = argv[2].length;\n      let stringLength = argv[3].length;\n      let tokenLength = (stringLength + (16 * 2)) * 4;\n      let args = [string, key];\n\n      ecEncrypt.main(argv);\n\n      assert.deepEqual(ecEncrypt.generateToken.args[0], args, 'generateToken should have been called with token length, string, string length, key, and key length');\n    });\n  });\n});\n"]}
{"version":3,"sources":["../app/ec-encrypt.js"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAIA,IAAM,WAAW,EAAX;;AAEN,SAAS,cAAT,CAAyB,GAAzB,EAA8B,IAA9B,EAAoC,WAApC,EAAiD;AAC/C,MAAI,cAAc,IAAI,MAAJ,GAAa,KAAK,MAAL,GAAc,YAAY,MAAZ,CADE;AAE/C,MAAI,MAAM,OAAO,MAAP,CAAc,CAAC,GAAD,EAAM,WAAN,EAAmB,IAAnB,CAAd,EAAwC,WAAxC,CAAN,CAF2C;;AAI/C,MAAI,QAAQ,IAAI,QAAJ,CAAa,QAAb,CAAR,CAJ2C;AAK/C,UAAQ,MAAM,OAAN,CAAc,KAAd,EAAqB,IAArB,CAAR,CAL+C;AAM/C,UAAQ,MAAM,OAAN,CAAc,KAAd,EAAqB,IAArB,CAAR,CAN+C;;AAQ/C,SAAO,KAAP,CAR+C;CAAjD;;AAWA,SAAS,SAAT,CAAoB,IAApB,EAA0B,GAA1B,EAA+B,MAA/B,EAAuC;AACrC,MAAM,SAAS,iBAAO,cAAP,CAAsB,aAAtB,EAAqC,IAArC,EAA2C,GAA3C,CAAT,CAD+B;AAErC,MAAI,YAAY,OAAO,MAAP,CAAc,MAAd,CAAZ,CAFiC;AAGrC,MAAI,QAAQ,OAAO,KAAP,EAAR,CAHiC;AAIrC,MAAI,cAAc,UAAU,MAAV,GAAmB,MAAM,MAAN,CAJA;;AAMrC,cAAY,OAAO,MAAP,CAAc,CAAC,SAAD,EAAY,KAAZ,CAAd,EAAkC,WAAlC,CAAZ,CANqC;;AAQrC,SAAO;AACL,gBAAY,SAAZ;AACA,SAAK,OAAO,UAAP,EAAL;GAFF,CARqC;CAAvC;;AAcA,SAAS,UAAT,GAAuB;AACrB,SAAO,iBAAO,WAAP,CAAmB,QAAnB,CAAP,CADqB;CAAvB;;AAIA,SAAS,YAAT,CAAuB,GAAvB,EAA4B;AAC1B,SAAO,iBAAO,UAAP,CAAkB,QAAlB,EACJ,MADI,CACG,GADH,EACQ,MADR,EAEJ,MAFI,EAAP,CAD0B;CAA5B;;AAMA,SAAS,aAAT,CAAwB,MAAxB,EAAgC,GAAhC,EAAqC;AACnC,MAAM,OAAO,KAAK,YAAL,CAAkB,GAAlB,CAAP,CAD6B;AAEnC,MAAM,MAAM,KAAK,UAAL,EAAN,CAF6B;AAGnC,MAAM,UAAU,KAAK,SAAL,CAAe,IAAf,EAAqB,GAArB,EAA0B,IAAI,MAAJ,CAAW,MAAX,CAA1B,CAAV,CAH6B;AAInC,MAAM,SAAS,KAAK,cAAL,CAAoB,GAApB,EAAyB,QAAQ,GAAR,EAAa,QAAQ,UAAR,CAA/C,CAJ6B;;AAMnC,SAAO,MAAP,CANmC;CAArC;;AASA,SAAS,IAAT,CAAe,IAAf,EAAqB;AACnB,MAAI,MAAM,KAAK,CAAL,CAAN,CADe;AAEnB,MAAI,SAAS,KAAK,CAAL,CAAT,CAFe;;AAInB,MAAI,QAAQ,KAAK,aAAL,CAAmB,MAAnB,EAA2B,GAA3B,CAAR,CAJe;AAKnB,UAAQ,GAAR,CAAY,KAAZ,EALmB;CAArB;;kBAQe;AACb,gCADa;AAEb,sBAFa;AAGb,wBAHa;AAIb,4BAJa;AAKb,8BALa;AAMb,YANa","file":"ec-encrypt.js","sourcesContent":["import crypto from 'crypto';\nimport 'source-map-support/register';\n\n/* Edgecast token generation ported from ectoken_v3 */\n\nconst G_IV_LEN = 12;\n\nfunction constructToken (lIv, lTag, lCiphertext) {\n  let totalLength = lIv.length + lTag.length + lCiphertext.length;\n  let buf = Buffer.concat([lIv, lCiphertext, lTag], totalLength);\n\n  let token = buf.toString('base64');\n  token = token.replace(/\\+/g, '\\-');\n  token = token.replace(/\\//g, '\\_');\n\n  return token;\n}\n\nfunction ecEncrypt (aKey, aIv, string) {\n  const cipher = crypto.createCipheriv('aes-256-gcm', aKey, aIv);\n  let encrypted = cipher.update(string);\n  let final = cipher.final();\n  let totalLength = encrypted.length + final.length;\n\n  encrypted = Buffer.concat([encrypted, final], totalLength);\n\n  return {\n    ciphertext: encrypted,\n    tag: cipher.getAuthTag()\n  };\n}\n\nfunction generateIv () {\n  return crypto.randomBytes(G_IV_LEN);\n}\n\nfunction generateHash (key) {\n  return crypto.createHash('sha256')\n    .update(key, 'utf8')\n    .digest();\n}\n\nfunction generateToken (string, key) {\n  const lKey = this.generateHash(key);\n  const lIv = this.generateIv();\n  const lCipher = this.ecEncrypt(lKey, lIv, new Buffer(string));\n  const lToken = this.constructToken(lIv, lCipher.tag, lCipher.ciphertext);\n\n  return lToken;\n}\n\nfunction main (argv) {\n  let key = argv[2];\n  let string = argv[3];\n\n  let token = this.generateToken(string, key);\n  console.log(token);\n}\n\nexport default {\n  constructToken,\n  ecEncrypt,\n  generateIv,\n  generateHash,\n  generateToken,\n  main\n}\n"]}
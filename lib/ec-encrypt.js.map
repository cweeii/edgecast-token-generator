{"version":3,"sources":["../app/ec-encrypt.js"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAIA,IAAM,SAAS,EAAT;;AAEN,SAAS,cAAT,CAAyB,KAAzB,EAAgC,MAAhC,EAAwC,aAAxC,EAAuD;AACrD,MAAI,cAAc,MAAM,MAAN,GAAe,OAAO,MAAP,GAAgB,cAAc,MAAd,CADI;AAErD,MAAI,MAAM,OAAO,MAAP,CAAc,CAAC,KAAD,EAAQ,aAAR,EAAuB,MAAvB,CAAd,EAA8C,WAA9C,CAAN,CAFiD;;AAIrD,MAAI,QAAQ,IAAI,QAAJ,CAAa,QAAb,CAAR,CAJiD;AAKrD,UAAQ,MAAM,OAAN,CAAc,KAAd,EAAqB,IAArB,CAAR,CALqD;AAMrD,UAAQ,MAAM,OAAN,CAAc,KAAd,EAAqB,IAArB,CAAR,CANqD;;AAQrD,SAAO,KAAP,CARqD;CAAvD;;AAWA,SAAS,SAAT,CAAoB,MAApB,EAA4B,KAA5B,EAAmC,aAAnC,EAAkD;AAChD,MAAI,SAAS,iBAAO,cAAP,CAAsB,aAAtB,EAAqC,MAArC,EAA6C,KAA7C,CAAT,CAD4C;AAEhD,MAAI,eAAe,OAAO,MAAP,CAAc,aAAd,CAAf,CAF4C;AAGhD,MAAI,WAAW,OAAO,KAAP,EAAX,CAH4C;AAIhD,MAAI,cAAc,aAAa,MAAb,GAAsB,SAAS,MAAT,CAJQ;;AAMhD,iBAAe,OAAO,MAAP,CAAc,CAAC,YAAD,EAAe,QAAf,CAAd,EAAwC,WAAxC,CAAf,CANgD;;AAQhD,SAAO;AACL,mBAAe,YAAf;AACA,YAAQ,OAAO,UAAP,EAAR;GAFF,CARgD;CAAlD;;AAcA,SAAS,UAAT,GAAuB;AACrB,SAAO,iBAAO,WAAP,CAAmB,MAAnB,CAAP,CADqB;CAAvB;;AAIA,SAAS,YAAT,CAAuB,GAAvB,EAA4B;AAC1B,SAAO,iBAAO,UAAP,CAAkB,QAAlB,EACJ,MADI,CACG,GADH,EACQ,MADR,EAEJ,MAFI,EAAP,CAD0B;CAA5B;;AAMA,SAAS,aAAT,CAAwB,GAAxB,EAA6B,UAA7B,EAAyC;AACvC,QAAM,OAAO,GAAP,CAAN,CADuC;AAEvC,eAAa,OAAO,UAAP,CAAb,CAFuC;;AAIvC,MAAM,UAAU,KAAK,YAAL,CAAkB,GAAlB,CAAV,CAJiC;AAKvC,MAAM,QAAQ,KAAK,UAAL,EAAR,CALiC;AAMvC,MAAM,SAAS,KAAK,SAAL,CAAe,OAAf,EAAwB,KAAxB,EAA+B,IAAI,MAAJ,CAAW,UAAX,CAA/B,CAAT,CANiC;AAOvC,MAAM,QAAQ,KAAK,cAAL,CAAoB,KAApB,EAA2B,OAAO,MAAP,EAAe,OAAO,aAAP,CAAlD,CAPiC;;AASvC,SAAO,KAAP,CATuC;CAAzC;;AAYA,SAAS,IAAT,CAAe,IAAf,EAAqB;AACnB,MAAM,MAAM,KAAK,CAAL,CAAN,CADa;AAEnB,MAAM,aAAa,KAAK,CAAL,CAAb,CAFa;;AAInB,MAAI,QAAQ,KAAK,aAAL,CAAmB,GAAnB,EAAwB,UAAxB,CAAR,CAJe;AAKnB,UAAQ,GAAR,CAAY,KAAZ,EALmB;CAArB;;kBAQe;AACb,gCADa;AAEb,sBAFa;AAGb,wBAHa;AAIb,4BAJa;AAKb,8BALa;AAMb,YANa","file":"ec-encrypt.js","sourcesContent":["import crypto from 'crypto';\nimport 'source-map-support/register';\n\n/* Edgecast token generation ported from ectoken_v3 */\n\nconst IV_LEN = 12;\n\nfunction constructToken (bufIv, bufTag, bufCiphertext) {\n  let totalLength = bufIv.length + bufTag.length + bufCiphertext.length;\n  let buf = Buffer.concat([bufIv, bufCiphertext, bufTag], totalLength);\n\n  let token = buf.toString('base64');\n  token = token.replace(/\\+/g, '\\-');\n  token = token.replace(/\\//g, '\\_');\n\n  return token;\n}\n\nfunction ecEncrypt (bufKey, bufIv, bufExpireTime) {\n  let cipher = crypto.createCipheriv('aes-256-gcm', bufKey, bufIv);\n  let bufEncrypted = cipher.update(bufExpireTime);\n  let bufFinal = cipher.final();\n  let totalLength = bufEncrypted.length + bufFinal.length;\n\n  bufEncrypted = Buffer.concat([bufEncrypted, bufFinal], totalLength);\n\n  return {\n    bufCiphertext: bufEncrypted,\n    bufTag: cipher.getAuthTag()\n  };\n}\n\nfunction generateIv () {\n  return crypto.randomBytes(IV_LEN);\n}\n\nfunction generateHash (key) {\n  return crypto.createHash('sha256')\n    .update(key, 'utf8')\n    .digest();\n}\n\nfunction generateToken (key, expireTime) {\n  key = String(key);\n  expireTime = String(expireTime);\n\n  const bufHash = this.generateHash(key);\n  const bufIv = this.generateIv();\n  const cipher = this.ecEncrypt(bufHash, bufIv, new Buffer(expireTime));\n  const token = this.constructToken(bufIv, cipher.bufTag, cipher.bufCiphertext);\n\n  return token;\n}\n\nfunction main (argv) {\n  const key = argv[2];\n  const expireTime = argv[3];\n\n  let token = this.generateToken(key, expireTime);\n  console.log(token);\n}\n\nexport default {\n  constructToken,\n  ecEncrypt,\n  generateIv,\n  generateHash,\n  generateToken,\n  main\n}\n"]}
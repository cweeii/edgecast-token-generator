{"version":3,"sources":["../app/ec-encrypt.js"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAIA,IAAM,SAAS,EAAT;;AAEN,SAAS,cAAT,CAAyB,EAAzB,EAA6B,GAA7B,EAAkC,UAAlC,EAA8C;AAC5C,MAAM,cAAc,GAAG,MAAH,GAAY,IAAI,MAAJ,GAAa,WAAW,MAAX,CADD;AAE5C,MAAI,MAAM,OAAO,MAAP,CAAc,CAAC,EAAD,EAAK,UAAL,EAAiB,GAAjB,CAAd,EAAqC,WAArC,CAAN,CAFwC;;AAI5C,MAAI,QAAQ,IAAI,QAAJ,CAAa,QAAb,CAAR,CAJwC;AAK5C,UAAQ,MAAM,OAAN,CAAc,KAAd,EAAqB,IAArB,CAAR,CAL4C;AAM5C,UAAQ,MAAM,OAAN,CAAc,KAAd,EAAqB,IAArB,CAAR,CAN4C;;AAQ5C,SAAO,KAAP,CAR4C;CAA9C;;AAWA,SAAS,SAAT,CAAoB,GAApB,EAAyB,EAAzB,EAA6B,UAA7B,EAAyC;AACvC,MAAM,SAAS,iBAAO,cAAP,CAAsB,aAAtB,EAAqC,GAArC,EAA0C,EAA1C,CAAT,CADiC;AAEvC,MAAI,YAAY,OAAO,MAAP,CAAc,UAAd,CAAZ,CAFmC;AAGvC,MAAI,QAAQ,OAAO,KAAP,EAAR,CAHmC;AAIvC,MAAM,cAAc,UAAU,MAAV,GAAmB,MAAM,MAAN,CAJA;;AAMvC,cAAY,OAAO,MAAP,CAAc,CAAC,SAAD,EAAY,KAAZ,CAAd,EAAkC,WAAlC,CAAZ,CANuC;;AAQvC,SAAO;AACL,gBAAY,SAAZ;AACA,SAAK,OAAO,UAAP,EAAL;GAFF,CARuC;CAAzC;;AAcA,SAAS,UAAT,GAAuB;AACrB,SAAO,iBAAO,WAAP,CAAmB,MAAnB,CAAP,CADqB;CAAvB;;AAIA,SAAS,YAAT,CAAuB,GAAvB,EAA4B;AAC1B,SAAO,iBAAO,UAAP,CAAkB,QAAlB,EACJ,MADI,CACG,GADH,EACQ,MADR,EAEJ,MAFI,EAAP,CAD0B;CAA5B;;AAMA,SAAS,aAAT,CAAwB,UAAxB,EAAoC,GAApC,EAAyC;AACvC,MAAM,OAAO,KAAK,YAAL,CAAkB,GAAlB,CAAP,CADiC;AAEvC,MAAM,KAAK,KAAK,UAAL,EAAL,CAFiC;AAGvC,MAAM,SAAS,KAAK,SAAL,CAAe,IAAf,EAAqB,EAArB,EAAyB,IAAI,MAAJ,CAAW,UAAX,CAAzB,CAAT,CAHiC;AAIvC,MAAM,QAAQ,KAAK,cAAL,CAAoB,EAApB,EAAwB,OAAO,GAAP,EAAY,OAAO,UAAP,CAA5C,CAJiC;;AAMvC,SAAO,KAAP,CANuC;CAAzC;;AASA,SAAS,IAAT,CAAe,IAAf,EAAqB;AACnB,MAAI,MAAM,KAAK,CAAL,CAAN,CADe;AAEnB,MAAI,aAAa,KAAK,CAAL,CAAb,CAFe;;AAInB,MAAI,QAAQ,KAAK,aAAL,CAAmB,UAAnB,EAA+B,GAA/B,CAAR,CAJe;AAKnB,UAAQ,GAAR,CAAY,KAAZ,EALmB;CAArB;;kBAQe;AACb,gCADa;AAEb,sBAFa;AAGb,wBAHa;AAIb,4BAJa;AAKb,8BALa;AAMb,YANa","file":"ec-encrypt.js","sourcesContent":["import crypto from 'crypto';\nimport 'source-map-support/register';\n\n/* Edgecast token generation ported from ectoken_v3 */\n\nconst IV_LEN = 12;\n\nfunction constructToken (iv, tag, ciphertext) {\n  const totalLength = iv.length + tag.length + ciphertext.length;\n  let buf = Buffer.concat([iv, ciphertext, tag], totalLength);\n\n  let token = buf.toString('base64');\n  token = token.replace(/\\+/g, '\\-');\n  token = token.replace(/\\//g, '\\_');\n\n  return token;\n}\n\nfunction ecEncrypt (key, iv, expireTime) {\n  const cipher = crypto.createCipheriv('aes-256-gcm', key, iv);\n  let encrypted = cipher.update(expireTime);\n  let final = cipher.final();\n  const totalLength = encrypted.length + final.length;\n\n  encrypted = Buffer.concat([encrypted, final], totalLength);\n\n  return {\n    ciphertext: encrypted,\n    tag: cipher.getAuthTag()\n  };\n}\n\nfunction generateIv () {\n  return crypto.randomBytes(IV_LEN);\n}\n\nfunction generateHash (key) {\n  return crypto.createHash('sha256')\n    .update(key, 'utf8')\n    .digest();\n}\n\nfunction generateToken (expireTime, key) {\n  const hash = this.generateHash(key);\n  const iv = this.generateIv();\n  const cipher = this.ecEncrypt(hash, iv, new Buffer(expireTime));\n  const token = this.constructToken(iv, cipher.tag, cipher.ciphertext);\n\n  return token;\n}\n\nfunction main (argv) {\n  let key = argv[2];\n  let expireTime = argv[3];\n\n  let token = this.generateToken(expireTime, key);\n  console.log(token);\n}\n\nexport default {\n  constructToken,\n  ecEncrypt,\n  generateIv,\n  generateHash,\n  generateToken,\n  main\n}\n"]}
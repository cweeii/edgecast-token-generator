{"version":3,"sources":["../app/ec-encrypt.js"],"names":[],"mappings":";;;;;;AAAA;;;;;;;;;;AAKA,IAAM,WAAW,EAAX;;AAEN,SAAS,cAAT,CAAwB,GAAxB,EAA6B,IAA7B,EAAmC,WAAnC,EAAgD;AAC9C,MAAI,cAAc,IAAI,MAAJ,GAAa,KAAK,MAAL,GAAc,YAAY,MAAZ,CADC;AAE9C,MAAI,MAAM,OAAO,MAAP,CAAc,CAAC,GAAD,EAAM,WAAN,EAAmB,IAAnB,CAAd,EAAwC,WAAxC,CAAN,CAF0C;;AAI9C,MAAI,QAAQ,IAAI,QAAJ,CAAa,QAAb,CAAR,CAJ0C;AAK9C,UAAQ,MAAM,OAAN,CAAc,KAAd,EAAqB,IAArB,CAAR,CAL8C;AAM9C,UAAQ,MAAM,OAAN,CAAc,KAAd,EAAqB,IAArB,CAAR,CAN8C;;AAQ9C,SAAO,KAAP,CAR8C;CAAhD;;AAWA,SAAS,SAAT,CAAmB,IAAnB,EAAyB,GAAzB,EAA8B,MAA9B,EAAsC;AACpC,MAAM,SAAS,iBAAO,cAAP,CAAsB,aAAtB,EAAqC,IAArC,EAA2C,GAA3C,CAAT,CAD8B;AAEpC,MAAI,YAAY,OAAO,MAAP,CAAc,MAAd,CAAZ,CAFgC;AAGpC,MAAI,QAAQ,OAAO,KAAP,EAAR,CAHgC;AAIpC,MAAI,cAAc,UAAU,MAAV,GAAmB,MAAM,MAAN,CAJD;;AAMpC,cAAY,OAAO,MAAP,CAAc,CAAC,SAAD,EAAY,KAAZ,CAAd,EAAkC,WAAlC,CAAZ,CANoC;;AAQpC,SAAO;AACL,gBAAY,SAAZ;AACA,SAAK,OAAO,UAAP,EAAL;GAFF,CARoC;CAAtC;;AAcA,SAAS,UAAT,GAAsB;AACpB,SAAO,iBAAO,WAAP,CAAmB,QAAnB,CAAP,CADoB;CAAtB;;AAIA,SAAS,YAAT,CAAsB,GAAtB,EAA2B;AACzB,SAAO,iBAAO,UAAP,CAAkB,QAAlB,EACJ,MADI,CACG,GADH,EACQ,MADR,EAEJ,MAFI,EAAP,CADyB;CAA3B;;AAMA,SAAS,aAAT,CAAuB,MAAvB,EAA+B,GAA/B,EAAoC;AAClC,MAAM,OAAO,KAAK,YAAL,CAAkB,GAAlB,CAAP,CAD4B;AAElC,MAAM,MAAM,KAAK,UAAL,EAAN,CAF4B;AAGlC,MAAM,UAAU,KAAK,SAAL,CAAe,IAAf,EAAqB,GAArB,EAA0B,IAAI,MAAJ,CAAW,MAAX,CAA1B,CAAV,CAH4B;AAIlC,MAAM,SAAS,KAAK,cAAL,CAAoB,GAApB,EAAyB,QAAQ,GAAR,EAAa,QAAQ,UAAR,CAA/C,CAJ4B;;AAMlC,SAAO,MAAP,CANkC;CAApC;;AASA,SAAS,IAAT,CAAe,IAAf,EAAoB;AAClB,MAAI,MAAM,KAAK,CAAL,CAAN,CADc;AAElB,MAAI,SAAS,KAAK,CAAL,CAAT,CAFc;;AAIlB,MAAI,QAAQ,KAAK,aAAL,CAAmB,MAAnB,EAA2B,GAA3B,CAAR,CAJc;AAKlB,UAAQ,GAAR,CAAY,KAAZ,EALkB;CAApB;;kBAQe;AACb,YADa;AAEb,8BAFa;AAGb,4BAHa;AAIb,wBAJa;AAKb,sBALa;AAMb,gCANa","file":"ec-encrypt.js","sourcesContent":["import crypto from 'crypto';\n// require('source-map-support/register');\n\n/* Edgecast token generation */\n\nconst G_IV_LEN = 12;\n\nfunction constructToken(lIv, lTag, lCiphertext) {\n  let totalLength = lIv.length + lTag.length + lCiphertext.length;\n  let buf = Buffer.concat([lIv, lCiphertext, lTag], totalLength);\n\n  let token = buf.toString('base64');\n  token = token.replace(/\\+/g, '\\-');\n  token = token.replace(/\\//g, '\\_');\n\n  return token;\n}\n\nfunction ecEncrypt(aKey, aIv, string) {\n  const cipher = crypto.createCipheriv('aes-256-gcm', aKey, aIv);\n  let encrypted = cipher.update(string);\n  let final = cipher.final();\n  let totalLength = encrypted.length + final.length;\n\n  encrypted = Buffer.concat([encrypted, final], totalLength);\n\n  return {\n    ciphertext: encrypted,\n    tag: cipher.getAuthTag()\n  };\n}\n\nfunction generateIv() {\n  return crypto.randomBytes(G_IV_LEN);\n}\n\nfunction generateHash(key) {\n  return crypto.createHash('sha256')\n    .update(key, 'utf8')\n    .digest();\n}\n\nfunction generateToken(string, key) {\n  const lKey = this.generateHash(key);\n  const lIv = this.generateIv();\n  const lCipher = this.ecEncrypt(lKey, lIv, new Buffer(string));\n  const lToken = this.constructToken(lIv, lCipher.tag, lCipher.ciphertext);\n\n  return lToken;\n}\n\nfunction main (argv){\n  let key = argv[2];\n  let string = argv[3];\n\n  let token = this.generateToken(string, key);\n  console.log(token);\n}\n\nexport default {\n  main,\n  generateToken,\n  generateHash,\n  generateIv,\n  ecEncrypt,\n  constructToken\n}\n"]}